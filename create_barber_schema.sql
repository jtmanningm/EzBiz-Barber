-- =====================================================
-- EZ_BIZ BARBER SCHEMA CREATION SCRIPT
-- =====================================================
-- This script creates the complete database schema for the OPERATIONAL.BARBER instance
-- Based on the existing OPERATIONAL.CARPET schema structure
-- Generated: 2025-01-06

-- =====================================================
-- CORE BUSINESS TABLES
-- =====================================================

-- Business Information Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.BUSINESS_INFO (
    BUSINESS_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    BUSINESS_NAME VARCHAR(255) NOT NULL,
    CONTACT_EMAIL VARCHAR(255),
    CONTACT_PHONE VARCHAR(50),
    ADDRESS_LINE1 VARCHAR(255),
    ADDRESS_LINE2 VARCHAR(255),
    CITY VARCHAR(100),
    STATE VARCHAR(50),
    ZIP_CODE VARCHAR(20),
    BUSINESS_TYPE VARCHAR(100),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Services Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.SERVICES (
    SERVICE_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    SERVICE_NAME VARCHAR(255) NOT NULL,
    SERVICE_CATEGORY VARCHAR(100),
    COST DECIMAL(10,2),
    SERVICE_DURATION NUMBER, -- in minutes
    DESCRIPTION TEXT,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Employees Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.EMPLOYEE (
    EMPLOYEE_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    FIRST_NAME VARCHAR(100) NOT NULL,
    LAST_NAME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(255),
    PHONE_NUMBER VARCHAR(50),
    JOB_TITLE VARCHAR(100),
    HOURLY_RATE DECIMAL(10,2),
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    HIRE_DATE DATE,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- =====================================================
-- CUSTOMER MANAGEMENT TABLES
-- =====================================================

-- Customers Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.CUSTOMER (
    CUSTOMER_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    FIRST_NAME VARCHAR(100) NOT NULL,
    LAST_NAME VARCHAR(100) NOT NULL,
    EMAIL_ADDRESS VARCHAR(255),
    PHONE_NUMBER VARCHAR(50),
    DATE_OF_BIRTH DATE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Customer Portal Users Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.CUSTOMER_PORTAL_USERS (
    PORTAL_USER_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    CUSTOMER_ID NUMBER,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    PASSWORD_HASH VARCHAR(255) NOT NULL,
    FAILED_LOGIN_ATTEMPTS NUMBER DEFAULT 0,
    ACCOUNT_LOCKED BOOLEAN DEFAULT FALSE,
    ACCOUNT_LOCKED_UNTIL TIMESTAMP_NTZ,
    LAST_LOGIN_DATE TIMESTAMP_NTZ,
    PASSWORD_RESET_TOKEN VARCHAR(255),
    PASSWORD_RESET_EXPIRY TIMESTAMP_NTZ,
    EMAIL_VERIFIED BOOLEAN DEFAULT FALSE,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES OPERATIONAL.BARBER.CUSTOMER(CUSTOMER_ID)
);

-- Customer Preferences Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.CUSTOMER_PREFERENCES (
    PREFERENCE_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    CUSTOMER_ID NUMBER NOT NULL,
    MARKETING_EMAIL BOOLEAN DEFAULT TRUE,
    MARKETING_SMS BOOLEAN DEFAULT TRUE,
    APPOINTMENT_REMINDERS BOOLEAN DEFAULT TRUE,
    PROMOTIONAL_MESSAGES BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES OPERATIONAL.BARBER.CUSTOMER(CUSTOMER_ID)
);

-- Accounts Table (for business customers)
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.ACCOUNTS (
    ACCOUNT_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    ACCOUNT_NAME VARCHAR(255) NOT NULL,
    CONTACT_FIRST_NAME VARCHAR(100),
    CONTACT_LAST_NAME VARCHAR(100),
    CONTACT_EMAIL VARCHAR(255),
    CONTACT_PHONE VARCHAR(50),
    BILLING_ADDRESS_1 VARCHAR(255),
    BILLING_ADDRESS_2 VARCHAR(255),
    BILLING_CITY VARCHAR(100),
    BILLING_STATE VARCHAR(50),
    BILLING_ZIP VARCHAR(20),
    BILLING_DATE NUMBER, -- day of month
    ACTIVE_FLAG BOOLEAN DEFAULT TRUE,
    ACCOUNT_CREATION_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    LAST_MODIFIED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- =====================================================
-- TRANSACTION MANAGEMENT TABLES
-- =====================================================

-- Service Transactions Table (Main transaction table)
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.SERVICE_TRANSACTION (
    ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    CUSTOMER_ID NUMBER,
    ACCOUNT_ID NUMBER,
    SERVICE_NAME VARCHAR(255),
    SERVICE_ID NUMBER,
    SERVICE2_ID NUMBER,
    SERVICE3_ID NUMBER,
    BASE_SERVICE_COST DECIMAL(10,2),
    SERVICE2_COST DECIMAL(10,2),
    SERVICE3_COST DECIMAL(10,2),
    AMOUNT DECIMAL(10,2),
    DISCOUNT DECIMAL(10,2) DEFAULT 0,
    STATUS VARCHAR(50) DEFAULT 'SCHEDULED',
    SERVICE_DATE DATE,
    START_TIME TIME,
    END_TIME TIME,
    DEPOSIT DECIMAL(10,2) DEFAULT 0,
    DEPOSIT_PAID BOOLEAN DEFAULT FALSE,
    DEPOSIT_PAYMENT_METHOD VARCHAR(50),
    AMOUNT_RECEIVED DECIMAL(10,2) DEFAULT 0,
    PYMT_MTHD_1 VARCHAR(50),
    PYMT_MTHD_2 VARCHAR(50),
    PYMT_MTHD_1_AMT DECIMAL(10,2),
    PYMT_MTHD_2_AMT DECIMAL(10,2),
    MATERIAL_COST DECIMAL(10,2) DEFAULT 0,
    TOTAL_LABOR_COST DECIMAL(10,2) DEFAULT 0,
    PRICING_STRATEGY VARCHAR(100),
    MARKUP_PERCENTAGE DECIMAL(5,2),
    PRICE_ADJUSTMENTS_JSON TEXT,
    IS_RECURRING BOOLEAN DEFAULT FALSE,
    RECURRENCE_PATTERN VARCHAR(100),
    COMMENTS TEXT,
    COMPLETION_DATE DATE,
    EMPLOYEE1_ID NUMBER,
    EMPLOYEE2_ID NUMBER,
    EMPLOYEE3_ID NUMBER,
    CREATED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    LAST_MODIFIED_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES OPERATIONAL.BARBER.CUSTOMER(CUSTOMER_ID),
    FOREIGN KEY (ACCOUNT_ID) REFERENCES OPERATIONAL.BARBER.ACCOUNTS(ACCOUNT_ID),
    FOREIGN KEY (SERVICE_ID) REFERENCES OPERATIONAL.BARBER.SERVICES(SERVICE_ID),
    FOREIGN KEY (SERVICE2_ID) REFERENCES OPERATIONAL.BARBER.SERVICES(SERVICE_ID),
    FOREIGN KEY (SERVICE3_ID) REFERENCES OPERATIONAL.BARBER.SERVICES(SERVICE_ID),
    FOREIGN KEY (EMPLOYEE1_ID) REFERENCES OPERATIONAL.BARBER.EMPLOYEE(EMPLOYEE_ID),
    FOREIGN KEY (EMPLOYEE2_ID) REFERENCES OPERATIONAL.BARBER.EMPLOYEE(EMPLOYEE_ID),
    FOREIGN KEY (EMPLOYEE3_ID) REFERENCES OPERATIONAL.BARBER.EMPLOYEE(EMPLOYEE_ID)
);

-- Service Addresses Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.SERVICE_ADDRESSES (
    ADDRESS_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    CUSTOMER_ID NUMBER NOT NULL,
    ADDRESS_NAME VARCHAR(100),
    ADDRESS_LINE1 VARCHAR(255) NOT NULL,
    ADDRESS_LINE2 VARCHAR(255),
    CITY VARCHAR(100) NOT NULL,
    STATE VARCHAR(50) NOT NULL,
    ZIP_CODE VARCHAR(20) NOT NULL,
    IS_PRIMARY_SERVICE BOOLEAN DEFAULT FALSE,
    SPECIAL_INSTRUCTIONS TEXT,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES OPERATIONAL.BARBER.CUSTOMER(CUSTOMER_ID)
);

-- Service Assignments Table (Employee assignments to services)
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.SERVICE_ASSIGNMENTS (
    ASSIGNMENT_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    TRANSACTION_ID NUMBER NOT NULL,
    EMPLOYEE_ID NUMBER NOT NULL,
    ASSIGNMENT_DATE TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    ASSIGNMENT_STATUS VARCHAR(20) DEFAULT 'ASSIGNED',
    NOTES VARCHAR(500),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (TRANSACTION_ID) REFERENCES OPERATIONAL.BARBER.SERVICE_TRANSACTION(ID),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES OPERATIONAL.BARBER.EMPLOYEE(EMPLOYEE_ID)
);

-- Upcoming Services View Table (for quick access to scheduled services)
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.UPCOMING_SERVICES (
    SERVICE_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    TRANSACTION_ID NUMBER NOT NULL,
    CUSTOMER_NAME VARCHAR(255),
    SERVICE_NAME VARCHAR(255),
    SERVICE_DATE DATE,
    SERVICE_TIME TIME,
    STATUS VARCHAR(50),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (TRANSACTION_ID) REFERENCES OPERATIONAL.BARBER.SERVICE_TRANSACTION(ID)
);

-- =====================================================
-- AUTHENTICATION & SESSION MANAGEMENT
-- =====================================================

-- Business Portal Users Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.BUSINESS_PORTAL_USERS (
    PORTAL_USER_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    EMPLOYEE_ID NUMBER,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    PASSWORD_HASH VARCHAR(255) NOT NULL,
    FAILED_LOGIN_ATTEMPTS NUMBER DEFAULT 0,
    ACCOUNT_LOCKED BOOLEAN DEFAULT FALSE,
    ACCOUNT_LOCKED_UNTIL TIMESTAMP_NTZ,
    LAST_LOGIN_DATE TIMESTAMP_NTZ,
    PASSWORD_RESET_TOKEN VARCHAR(255),
    PASSWORD_RESET_EXPIRY TIMESTAMP_NTZ,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES OPERATIONAL.BARBER.EMPLOYEE(EMPLOYEE_ID)
);

-- Customer Sessions Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.CUSTOMER_SESSIONS (
    SESSION_ID VARCHAR(255) PRIMARY KEY,
    PORTAL_USER_ID NUMBER NOT NULL,
    CUSTOMER_ID NUMBER,
    SESSION_DATA TEXT,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    LAST_ACCESSED TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    EXPIRES_AT TIMESTAMP_NTZ,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    IP_ADDRESS VARCHAR(45),
    USER_AGENT TEXT,
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (PORTAL_USER_ID) REFERENCES OPERATIONAL.BARBER.CUSTOMER_PORTAL_USERS(PORTAL_USER_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES OPERATIONAL.BARBER.CUSTOMER(CUSTOMER_ID)
);

-- Business Sessions Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.BUSINESS_SESSIONS (
    SESSION_ID VARCHAR(255) PRIMARY KEY,
    PORTAL_USER_ID NUMBER NOT NULL,
    EMPLOYEE_ID NUMBER,
    SESSION_DATA TEXT,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    LAST_ACCESSED TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    EXPIRES_AT TIMESTAMP_NTZ,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    IP_ADDRESS VARCHAR(45),
    USER_AGENT TEXT,
    FOREIGN KEY (PORTAL_USER_ID) REFERENCES OPERATIONAL.BARBER.BUSINESS_PORTAL_USERS(PORTAL_USER_ID),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES OPERATIONAL.BARBER.EMPLOYEE(EMPLOYEE_ID)
);

-- Verification Tokens Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.VERIFICATION_TOKENS (
    TOKEN_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    CUSTOMER_ID NUMBER,
    TOKEN_HASH VARCHAR(255) NOT NULL,
    TOKEN_TYPE VARCHAR(50) NOT NULL, -- 'EMAIL_VERIFICATION', 'PASSWORD_RESET', etc.
    EXPIRES_AT TIMESTAMP_NTZ NOT NULL,
    IS_USED BOOLEAN DEFAULT FALSE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    USED_AT TIMESTAMP_NTZ,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES OPERATIONAL.BARBER.CUSTOMER(CUSTOMER_ID)
);

-- =====================================================
-- PRICING & BUSINESS LOGIC TABLES
-- =====================================================

-- Pricing Strategies Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.PRICING_STRATEGIES (
    STRATEGY_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    STRATEGY_NAME VARCHAR(255) NOT NULL,
    STRATEGY_TYPE VARCHAR(100) NOT NULL,
    RULES_JSON TEXT,
    ACTIVE_FLAG BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- =====================================================
-- COMMUNICATION & MARKETING TABLES
-- =====================================================

-- Message Templates Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.MESSAGE_TEMPLATES (
    TEMPLATE_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    TEMPLATE_NAME VARCHAR(255) NOT NULL,
    TEMPLATE_TYPE VARCHAR(100) NOT NULL, -- 'EMAIL', 'SMS', 'PUSH'
    TEMPLATE_CONTENT TEXT NOT NULL,
    DELIVERY_CHANNELS VARCHAR(255), -- JSON array of channels
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Email Logs Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.EMAIL_LOGS (
    LOG_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    CUSTOMER_ID NUMBER,
    RECIPIENT_EMAIL VARCHAR(255) NOT NULL,
    SUBJECT VARCHAR(500),
    BODY TEXT,
    EMAIL_TYPE VARCHAR(100),
    STATUS VARCHAR(50) DEFAULT 'PENDING', -- 'PENDING', 'SENT', 'FAILED', 'DELIVERED'
    ERROR_MESSAGE TEXT,
    SENT_AT TIMESTAMP_NTZ,
    DELIVERED_AT TIMESTAMP_NTZ,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES OPERATIONAL.BARBER.CUSTOMER(CUSTOMER_ID)
);

-- Message Log Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.MESSAGE_LOG (
    MESSAGE_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    CUSTOMER_ID NUMBER,
    MESSAGE_TYPE VARCHAR(50) NOT NULL, -- 'EMAIL', 'SMS', 'PUSH'
    RECIPIENT VARCHAR(255) NOT NULL,
    SUBJECT VARCHAR(500),
    CONTENT TEXT NOT NULL,
    STATUS VARCHAR(50) DEFAULT 'PENDING',
    ERROR_MESSAGE TEXT,
    SENT_AT TIMESTAMP_NTZ,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES OPERATIONAL.BARBER.CUSTOMER(CUSTOMER_ID)
);

-- Marketing Campaigns Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.MARKETING_CAMPAIGNS (
    CAMPAIGN_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    CAMPAIGN_NAME VARCHAR(255) NOT NULL,
    CAMPAIGN_TYPE VARCHAR(100),
    CAMPAIGN_STATUS VARCHAR(50) DEFAULT 'DRAFT',
    START_DATE DATE,
    END_DATE DATE,
    TARGET_AUDIENCE TEXT, -- JSON or criteria description
    MESSAGE_TEMPLATE_ID NUMBER,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (MESSAGE_TEMPLATE_ID) REFERENCES OPERATIONAL.BARBER.MESSAGE_TEMPLATES(TEMPLATE_ID)
);

-- =====================================================
-- LOGGING & SECURITY TABLES
-- =====================================================

-- Session Log Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.SESSION_LOG (
    LOG_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    SESSION_ID VARCHAR(255),
    USER_TYPE VARCHAR(50), -- 'CUSTOMER', 'BUSINESS'
    USER_ID NUMBER,
    ACTION VARCHAR(255),
    IP_ADDRESS VARCHAR(45),
    USER_AGENT TEXT,
    TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Rate Limit Log Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.RATE_LIMIT_LOG (
    LOG_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    IP_ADDRESS VARCHAR(45),
    ENDPOINT VARCHAR(255),
    REQUEST_COUNT NUMBER DEFAULT 1,
    WINDOW_START TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    BLOCKED BOOLEAN DEFAULT FALSE,
    PORTAL_USER_ID NUMBER
);

-- Automation Settings Table
CREATE TABLE IF NOT EXISTS OPERATIONAL.BARBER.AUTOMATION_SETTINGS (
    SETTING_ID NUMBER IDENTITY(1,1) PRIMARY KEY,
    SETTING_NAME VARCHAR(255) NOT NULL UNIQUE,
    SETTING_VALUE TEXT,
    SETTING_TYPE VARCHAR(50), -- 'BOOLEAN', 'STRING', 'NUMBER', 'JSON'
    DESCRIPTION TEXT,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    MODIFIED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- =====================================================
-- NOTE: INDEXES REMOVED
-- =====================================================
-- Snowflake doesn't support CREATE INDEX on regular tables
-- Snowflake automatically optimizes queries without explicit indexes
-- Performance is handled by Snowflake's micro-partitioning and clustering

-- =====================================================
-- INITIAL SETUP DATA
-- =====================================================

-- Insert default business info (you'll need to update this)
INSERT INTO OPERATIONAL.BARBER.BUSINESS_INFO (
    BUSINESS_NAME, 
    CONTACT_EMAIL, 
    CONTACT_PHONE, 
    BUSINESS_TYPE
) 
SELECT 'Your Barber Shop', 'info@yourbarbershop.com', '(555) 123-4567', 'Barber Shop'
WHERE NOT EXISTS (SELECT 1 FROM OPERATIONAL.BARBER.BUSINESS_INFO);

-- Insert default pricing strategy
INSERT INTO OPERATIONAL.BARBER.PRICING_STRATEGIES (
    STRATEGY_NAME,
    STRATEGY_TYPE,
    RULES_JSON,
    ACTIVE_FLAG
)
SELECT 
    'Default Fixed Pricing',
    'FIXED_PRICE',
    '{"base_multiplier": 1.0, "markup_percentage": 0}',
    TRUE
WHERE NOT EXISTS (SELECT 1 FROM OPERATIONAL.BARBER.PRICING_STRATEGIES);

-- =====================================================
-- COMPLETION MESSAGE
-- =====================================================

-- Schema creation completed successfully!
-- Next steps:
-- 1. Run this script in your Snowflake environment to create the OPERATIONAL.BARBER schema
-- 2. The Ez_Biz_Barber application folder is ready to use with the new schema
-- 3. Add initial services, employees, and other business-specific data
-- 4. Test the application with the new schema